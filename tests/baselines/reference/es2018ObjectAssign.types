//// [tests/cases/compiler/es2018ObjectAssign.ts] ////

=== es2018ObjectAssign.ts ===
const test = Object.assign({}, { test: true });
>test : { test: boolean; }
>Object.assign({}, { test: true }) : { test: boolean; }
>Object.assign : { <T extends {}, U>(target: T, source: U): T & U; <T_1 extends {}, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V; <T_2 extends {}, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W; (target: object, ...sources: any[]): any; }
>Object : ObjectConstructor
>assign : { <T extends {}, U>(target: T, source: U): T & U; <T_1 extends {}, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V; <T_2 extends {}, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W; (target: object, ...sources: any[]): any; }
>{} : {}
>{ test: true } : { test: true; }
>test : true
>true : true

declare const p: Promise<number>;
>p : Promise<number>

p.finally();
>p.finally() : Promise<number>
>p.finally : (onfinally?: () => void) => Promise<number>
>p : Promise<number>
>finally : (onfinally?: () => void) => Promise<number>

