//// [tests/cases/compiler/unknownLikeUnionObjectFlagsNotPropagated.ts] ////

=== unknownLikeUnionObjectFlagsNotPropagated.ts ===
// repro from #52475#issuecomment-1411215277

type MyType = {} | null | undefined;
>MyType : {} | null | undefined

const myVar: MyType = null as MyType;
>myVar : MyType
>null as MyType : MyType

myVar?.toLocaleString;
>myVar?.toLocaleString : (() => string) | undefined
>myVar : MyType
>toLocaleString : (() => string) | undefined

myVar;
>myVar : MyType

async function myUnusedFunction() {
>myUnusedFunction : () => Promise<void>

    const fetch1 = Promise.resolve(['hello', 'world']);
>fetch1 : Promise<string[]>
>Promise.resolve(['hello', 'world']) : Promise<string[]>
>Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T_1>(value: T_1 | PromiseLike<T_1>): Promise<Awaited<T_1>>; }
>Promise : PromiseConstructor
>resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T_1>(value: T_1 | PromiseLike<T_1>): Promise<Awaited<T_1>>; }
>['hello', 'world'] : string[]
>'hello' : "hello"
>'world' : "world"

    const [data1] = await Promise.all([fetch1]);
>data1 : string[]
>await Promise.all([fetch1]) : [string[]]
>Promise.all([fetch1]) : Promise<[string[]]>
>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T_1 extends readonly unknown[] | []>(values: T_1): Promise<{ -readonly [P in keyof T_1]: Awaited<T_1[P]>; }>; }
>Promise : PromiseConstructor
>all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T_1 extends readonly unknown[] | []>(values: T_1): Promise<{ -readonly [P in keyof T_1]: Awaited<T_1[P]>; }>; }
>[fetch1] : [Promise<string[]>]
>fetch1 : Promise<string[]>

    data1.length;
>data1.length : number
>data1 : string[]
>length : number
}

