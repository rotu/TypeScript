//// [tests/cases/compiler/intersectionSatisfiesConstraint.ts] ////

=== intersectionSatisfiesConstraint.ts ===
interface FirstInterface {
    commonProperty: number
>commonProperty : number
}

interface SecondInterface {
    commonProperty: number
>commonProperty : number
}

const myFirstFunction = <T extends FirstInterface | SecondInterface>(param1: T) => {
>myFirstFunction : <T extends FirstInterface | SecondInterface>(param1: T) => void
><T extends FirstInterface | SecondInterface>(param1: T) => {    const newParam: T & { otherProperty: number } = Object.assign(param1, { otherProperty: 3 })    mySecondFunction(newParam)} : <T extends FirstInterface | SecondInterface>(param1: T) => void
>param1 : T

    const newParam: T & { otherProperty: number } = Object.assign(param1, { otherProperty: 3 })
>newParam : T & { otherProperty: number; }
>otherProperty : number
>Object.assign(param1, { otherProperty: 3 }) : T & { otherProperty: number; }
>Object.assign : { <T_1 extends {}, U>(target: T_1, source: U): T_1 & U; <T_2 extends {}, U_1, V>(target: T_2, source1: U_1, source2: V): T_2 & U_1 & V; <T_3 extends {}, U_2, V_1, W>(target: T_3, source1: U_2, source2: V_1, source3: W): T_3 & U_2 & V_1 & W; (target: object, ...sources: any[]): any; }
>Object : ObjectConstructor
>assign : { <T_1 extends {}, U>(target: T_1, source: U): T_1 & U; <T_2 extends {}, U_1, V>(target: T_2, source1: U_1, source2: V): T_2 & U_1 & V; <T_3 extends {}, U_2, V_1, W>(target: T_3, source1: U_2, source2: V_1, source3: W): T_3 & U_2 & V_1 & W; (target: object, ...sources: any[]): any; }
>param1 : T
>{ otherProperty: 3 } : { otherProperty: number; }
>otherProperty : number
>3 : 3

    mySecondFunction(newParam)
>mySecondFunction(newParam) : { commonProperty: number; otherProperty: number; }
>mySecondFunction : <T_1 extends { commonProperty: number; otherProperty: number; }>(newParam: T_1) => T_1
>newParam : (FirstInterface | SecondInterface) & { otherProperty: number; }
}

const mySecondFunction = <T extends { commonProperty: number, otherProperty: number }>(newParam: T) => {
>mySecondFunction : <T extends { commonProperty: number; otherProperty: number; }>(newParam: T) => T
><T extends { commonProperty: number, otherProperty: number }>(newParam: T) => {    return newParam} : <T extends { commonProperty: number; otherProperty: number; }>(newParam: T) => T
>commonProperty : number
>otherProperty : number
>newParam : T

    return newParam
>newParam : T
}

