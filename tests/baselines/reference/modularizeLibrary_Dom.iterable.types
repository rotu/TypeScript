//// [tests/cases/compiler/modularizeLibrary_Dom.iterable.ts] ////

=== modularizeLibrary_Dom.iterable.ts ===
for (const element of document.getElementsByTagName("a")) {
>element : HTMLAnchorElement
>document.getElementsByTagName("a") : HTMLCollectionOf<HTMLAnchorElement>
>document.getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K_1 extends keyof SVGElementTagNameMap>(qualifiedName: K_1): HTMLCollectionOf<SVGElementTagNameMap[K_1]>; <K_2 extends keyof MathMLElementTagNameMap>(qualifiedName: K_2): HTMLCollectionOf<MathMLElementTagNameMap[K_2]>; <K_3 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_3): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_3]>; (qualifiedName: string): HTMLCollectionOf<Element>; }
>document : Document
>getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K_1 extends keyof SVGElementTagNameMap>(qualifiedName: K_1): HTMLCollectionOf<SVGElementTagNameMap[K_1]>; <K_2 extends keyof MathMLElementTagNameMap>(qualifiedName: K_2): HTMLCollectionOf<MathMLElementTagNameMap[K_2]>; <K_3 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_3): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_3]>; (qualifiedName: string): HTMLCollectionOf<Element>; }
>"a" : "a"

    element.href;
>element.href : string
>element : HTMLAnchorElement
>href : string
}
