//// [tests/cases/compiler/ipromise3.ts] ////

=== ipromise3.ts ===
interface IPromise3<T> {
    then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_2>(success?: (value: T) => U_2, error?: (error: any) => IPromise3<U_2>, progress?: (progress: any) => void): IPromise3<U_2>; <U_3>(success?: (value: T) => U_3, error?: (error: any) => U_3, progress?: (progress: any) => void): IPromise3<U_3>; }
>success : (value: T) => IPromise3<U>
>value : T
>error : (error: any) => IPromise3<U>
>error : any
>progress : (progress: any) => void
>progress : any

    then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U_2>(success?: (value: T) => U_2, error?: (error: any) => IPromise3<U_2>, progress?: (progress: any) => void): IPromise3<U_2>; <U_3>(success?: (value: T) => U_3, error?: (error: any) => U_3, progress?: (progress: any) => void): IPromise3<U_3>; }
>success : (value: T) => IPromise3<U>
>value : T
>error : (error: any) => U
>error : any
>progress : (progress: any) => void
>progress : any

    then<U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_2>(success?: (value: T) => IPromise3<U_2>, error?: (error: any) => U_2, progress?: (progress: any) => void): IPromise3<U_2>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_3>(success?: (value: T) => U_3, error?: (error: any) => U_3, progress?: (progress: any) => void): IPromise3<U_3>; }
>success : (value: T) => U
>value : T
>error : (error: any) => IPromise3<U>
>error : any
>progress : (progress: any) => void
>progress : any

    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_2>(success?: (value: T) => IPromise3<U_2>, error?: (error: any) => U_2, progress?: (progress: any) => void): IPromise3<U_2>; <U_3>(success?: (value: T) => U_3, error?: (error: any) => IPromise3<U_3>, progress?: (progress: any) => void): IPromise3<U_3>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
>success : (value: T) => U
>value : T
>error : (error: any) => U
>error : any
>progress : (progress: any) => void
>progress : any

    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void ): void;
>done : <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
>success : (value: T) => any
>value : T
>error : (error: any) => any
>error : any
>progress : (progress: any) => void
>progress : any
}
var p1: IPromise3<string>;
>p1 : IPromise3<string>

var p2: IPromise3<string> = p1.then(function (x) {
>p2 : IPromise3<string>
>p1.then(function (x) {    return x;}) : IPromise3<string>
>p1.then : { <U>(success?: (value: string) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: string) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_2>(success?: (value: string) => U_2, error?: (error: any) => IPromise3<U_2>, progress?: (progress: any) => void): IPromise3<U_2>; <U_3>(success?: (value: string) => U_3, error?: (error: any) => U_3, progress?: (progress: any) => void): IPromise3<U_3>; }
>p1 : IPromise3<string>
>then : { <U>(success?: (value: string) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: string) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_2>(success?: (value: string) => U_2, error?: (error: any) => IPromise3<U_2>, progress?: (progress: any) => void): IPromise3<U_2>; <U_3>(success?: (value: string) => U_3, error?: (error: any) => U_3, progress?: (progress: any) => void): IPromise3<U_3>; }
>function (x) {    return x;} : (x: string) => string
>x : string

    return x;
>x : string

});

